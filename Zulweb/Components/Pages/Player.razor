@page "/player"
@using Zulweb.Infrastructure
@using Zulweb.Models
@rendermode InteractiveServer
@inject SetlistController Setlist;
@inject ReaperInterface Reaper;
@implements IDisposable

<PageTitle>Setlist</PageTitle>

@if (!Setlist.Initialized)
{
    <div class="col-sm-12 col-md-8 mx-auto">
        <em>Loading ...</em>
    </div>
    return;
}

<div class="container-fluid">
    @if (Setlist.RehearsalMode)
    {
        <div class="alert alert-warning text-center rounded-0 py-2" role="alert">
            <strong>REHEARSAL MODE</strong>
        </div>
    }

    <div class="row">

        <div class="btn-group btn-group-lg my-4 col-sm-12 col-md-8 mx-auto" role="group" aria-label="Basic example">
            <button type="button" class="btn btn-warning"
                    @onclick="() => Setlist.PlayNext()">
                Next
            </button>
            <button type="button" class="btn @(Reaper.Playing ? "btn-outline-danger" : "btn-danger")"
                    @onclick="() => Reaper.Stop()">
                <i class="bi bi-stop-circle"></i>
            </button>
            <button type="button" class="btn @(Reaper.Playing ? "btn-success" : "btn-outline-success")"
                    @onclick="() => Reaper.Start()">
                <i class="bi bi-play-circle"></i>
            </button>

            <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown"
                    aria-expanded="false">
                <i class="bi bi-list"></i>
            </button>
            <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                <li><a class="dropdown-item" @onclick="() => ResetSession()">Reset Session</a></li>
                <li><a class="dropdown-item" @onclick="() => Setlist.RehearsalMode = !Setlist.RehearsalMode">Toggle
                        Rehearsal Mode</a></li>
            </ul>
        </div>

        <ul class="list-group col-sm-12 col-md-8 mx-auto">
            @foreach (var item in Setlist.Items)
            {
                <a class="list-group-item list-group-item-action d-flex flex-column align-items-start border @(GetBorderColor(item)) border-3">
                    <div class="d-flex justify-content-between align-items-center w-100">
                        <div class="w-100">
                            <h5 class="d-flex justify-content-between align-items-center">
                                @item.RegionName
                                <span class="badge rounded-pill border-primary border text-secondary">
                                    @item.Length.ToString(@"hh\:mm\:ss")
                                </span>
                            </h5>
                            <div class="btn-group" role="group">
                                <button type="button"
                                        class="btn btn-success @(Reaper.Playing ? "disabled" : string.Empty)"
                                        @onclick="() => PlayRegion(item)">
                                    <i class="bi bi-play-circle"></i>
                                </button>
                                <button type="button"
                                        class="btn btn-warning @(Reaper.Playing ? "disabled" : string.Empty)"
                                        @onclick="() => Enqueue(item)">
                                    <i class="bi bi-arrow-bar-right"></i>
                                </button>
                                @if (Setlist.RehearsalMode)
                                {
                                    @if (_expandedRegion != item)
                                    {
                                        <button
                                            class="btn btn-outline-secondary @(Reaper.Playing ? "disabled" : string.Empty)"
                                            @onclick="() => ExpandRegion(item)">
                                            <i class="bi bi-chevron-expand"></i>
                                            Expand
                                        </button>
                                    }
                                    else
                                    {
                                        <button
                                            class="btn btn-outline-secondary @(Reaper.Playing ? "disabled" : string.Empty)"
                                            @onclick="() => CollapseRegion(item)">
                                            <i class="bi bi-chevron-contract"></i>
                                            Collapse
                                        </button>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                    <div class="progress my-3 w-100" role="progressbar">
                        <div class="progress-bar progress-bar-striped bg-info"
                             style="width: @(GetPercentage(item))%"></div>
                    </div>
                </a>
                @if (_expandedRegion == item)
                {
                    @foreach (var marker in _markers)
                    {
                        <a class="list-group-item list-group-item-action list-group-item-secondary"
                           @onclick="() => GoToMarker(marker)" @onclick:preventDefault>
                            @marker.Name
                        </a>
                    }
                }
            }
        </ul>
    </div>
</div>

@code {
    private ReaperMarker[] _markers = [];
    private LoadedSetlistItem? _expandedRegion;
    private CancellationTokenSource? _cts;
    private TimeSpan _time;
    private LoadedSetlistItem? _currentRegion;


    protected override Task OnInitializedAsync()
    {
        _cts = new CancellationTokenSource();
        Task.Run(async () =>
        {
            var token = _cts.Token;
            while (!token.IsCancellationRequested)
            {
                await Task.Delay(100, token);
                await Tick();
                await InvokeAsync(StateHasChanged);
            }
        });
        return Task.CompletedTask;
    }

    private async Task Tick()
    {
        _time = Reaper.Time;
        _currentRegion = Setlist.Items.FirstOrDefault(i => i.Start <= _time && i.End >= _time);
        await Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!Setlist.Initialized)
            await ResetSession();
    }

    public void Dispose()
    {
        _cts?.Cancel();
    }

    private async Task LoadMarkers(LoadedSetlistItem item)
    {
        var result = new List<ReaperMarker>
        {
            new(-1)
            {
                Name = "[Start]",
                Start = item.Start
            }
        };
        if (!string.IsNullOrEmpty(item.ReaperRegionName))
            result.AddRange(await Reaper.GetRegionMarkers(item.ReaperRegionName));
        _markers = result.ToArray();
    }

    private async Task PlayRegion(LoadedSetlistItem item)
    {
        var name = item.ReaperRegionName;
        if (string.IsNullOrEmpty(name)) return;
        if (Reaper.CurrentRegion?.Name.Equals(name, StringComparison.OrdinalIgnoreCase) != true)
            await Reaper.GoToRegion(name);
        await Reaper.Start();
    }

    private async Task ExpandRegion(LoadedSetlistItem item)
    {
        _expandedRegion = item;
        await LoadMarkers(item);
    }

    private Task CollapseRegion(LoadedSetlistItem item)
    {
        _expandedRegion = null;
        return Task.CompletedTask;
    }

    private async Task GoToMarker(ReaperMarker marker)
    {
        await Reaper.GoToTime(marker.Start);
    }

    private int GetPercentage(LoadedSetlistItem item)
    {
        if (_time < item.Start || _time > item.End) return 0;
        var perc = (_time - item.Start).TotalSeconds / item.Length.TotalSeconds * 100;
        return (int)perc;
    }

    private async Task Enqueue(LoadedSetlistItem item)
    {
        await Setlist.SetNext(item);
    }

    private async Task ResetSession()
    {
        await Setlist.ResetSetlist();
    }

    private string GetBorderColor(LoadedSetlistItem item)
    {
        return _currentRegion == item ? "border-success" : string.Empty;
    }

}