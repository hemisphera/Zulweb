@page "/player"
@using Zulweb.Infrastructure
@using Zulweb.Models
@rendermode InteractiveServer
@inject SetlistController Setlist;
@inject ReaperInterface Reaper;
@implements IDisposable

<PageTitle>Setlist</PageTitle>

<div class="container-fluid">
    <div class="row">

        <div class="btn-group btn-group-lg my-4" role="group" aria-label="Basic example">
            <button type="button" class="btn @(Reaper.Playing ? "btn-outline-danger" : "btn-danger")"
                    @onclick="() => Reaper.Stop()">
                <i class="bi bi-stop-circle"></i>
            </button>
            <button type="button" class="btn btn-outline-secondary"
                    @onclick="() => Reaper.Pause()">
                <i class="bi bi-pause-circle"></i>
            </button>
            <button type="button" class="btn @(Reaper.Playing ? "btn-success" : "btn-outline-success")"
                    @onclick="() => Reaper.Start()">
                <i class="bi bi-play-circle"></i>
            </button>
            <button type="button" class="btn btn-outline-secondary disabled">@_time.ToString("hh\\:mm\\:ss")</button>
        </div>

        @if (_items != null)
        {
            <ul class="list-group col-sm-12 col-md-8 mx-auto">
                @foreach (var item in _items)
                {
                    <a class="list-group-item list-group-item-action d-flex justify-content-between align-items-center border @(_currentRegion == item ? "border-success" : string.Empty) border-3">
                        <div>
                            <h5>@item.RegionName</h5>
                            <p>
                                <span class="small">@item.Length.ToString(@"hh\:mm\:ss")</span>
                            </p>
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-success" @onclick="() => PlayRegion(item)">
                                    <i class="bi bi-play-circle"></i>
                                    Play from start
                                </button>
                                @if (_expandedRegion != item)
                                {
                                    <button class="btn btn-outline-secondary" @onclick="() => ExpandRegion(item)">
                                        <i class="bi bi-chevron-expand"></i>
                                        Expand
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-outline-secondary" @onclick="() => CollapseRegion(item)">
                                        <i class="bi bi-chevron-contract"></i>
                                        Collapse
                                    </button>
                                }
                            </div>
                            <div class="progress my-3" role="progressbar">
                                <div class="progress-bar progress-bar-striped bg-info"
                                     style="width: @(GetPercentage(item))%"></div>
                            </div>
                        </div>
                    </a>
                    @if (_expandedRegion == item)
                    {
                        @foreach (var marker in _markers)
                        {
                            <a class="list-group-item list-group-item-action list-group-item-secondary"
                               @onclick="() => GoToMarker(marker)" @onclick:preventDefault>
                                @marker.Name
                            </a>
                        }
                    }
                }
            </ul>
        }
    </div>
</div>

@code {
    private LoadedSetlistItem[]? _items;
    private ReaperMarker[] _markers = [];
    private LoadedSetlistItem? _expandedRegion;
    private CancellationTokenSource? _cts;
    private TimeSpan _time;
    private LoadedSetlistItem? _currentRegion;


    protected override Task OnInitializedAsync()
    {
        _cts = new CancellationTokenSource();
        Task.Run(async () =>
        {
            var token = _cts.Token;
            while (!token.IsCancellationRequested)
            {
                await Task.Delay(100, token);
                await Tick();
                await InvokeAsync(StateHasChanged);
            }
        });
        return Task.CompletedTask;
    }

    private async Task Tick()
    {
        _time = Reaper.Time;
        _currentRegion = _items?.FirstOrDefault(i => i.Start <= _time && i.End >= _time);
        await Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        _items = await Setlist.BuildPlaylist();
    }

    public void Dispose()
    {
        _cts.Cancel();
    }

    private bool IsActive(LoadedSetlistItem item)
    {
        return _currentRegion == item;
    }

    private async Task LoadMarkers(LoadedSetlistItem item)
    {
        var result = new List<ReaperMarker>
        {
            new(-1)
            {
                Name = "[Start]",
                Start = item.Start
            }
        };
        if (!string.IsNullOrEmpty(item.ReaperRegionName))
            result.AddRange(await Reaper.GetRegionMarkers(item.ReaperRegionName));
        _markers = result.ToArray();
    }

    private async Task PlayRegion(LoadedSetlistItem item)
    {
        var name = item.ReaperRegionName;
        if (string.IsNullOrEmpty(name)) return;
        await Reaper.GoToRegion(name);
        await Reaper.Start();
    }

    private async Task ExpandRegion(LoadedSetlistItem item)
    {
        _expandedRegion = item;
        await LoadMarkers(item);
    }

    private Task CollapseRegion(LoadedSetlistItem item)
    {
        _expandedRegion = null;
        return Task.CompletedTask;
    }

    private async Task GoToMarker(ReaperMarker marker)
    {
        await Reaper.GoToTime(marker.Start);
    }

    private async Task GoToRegion(LoadedSetlistItem item)
    {
        await Reaper.GoToRegion(item.RegionName);
    }

    private int GetPercentage(LoadedSetlistItem item)
    {
        if (_time < item.Start || _time > item.End) return 0;
        var perc = (_time - item.Start).TotalSeconds / item.Length.TotalSeconds * 100;
        return (int)perc;
    }

}